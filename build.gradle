plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'org.mai'
version = '0.1'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // Log
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.4.14'
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.14'


    // Apache XML
    implementation group: 'org.apache.poi', name: 'poi', version: '5.2.5'
    implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.5'


    // Parser
    implementation group: 'org.jsoup', name: 'jsoup', version: '1.16.2'

    testImplementation 'com.h2database:h2'

    // Validations
    implementation group: 'org.hibernate.validator', name: 'hibernate-validator', version: '8.0.1.Final'
    implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.0.2'

    // Lombok
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // Base Spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Data Base
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.postgresql:postgresql:42.6.0'

    // Authorization
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // Testing
    testImplementation group: 'junit', name: 'junit', version: '4.13.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

test {
    useJUnitPlatform()
}

jar {
    duplicatesStrategy = 'exclude' // Устанавливаем стратегию обработки дубликатов (дубликаты будут исключены из сборки JAR)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes(
                'Implementation-Title': 'Jar Making Exaple',
                'Main-Class': 'org.mai.roombooking.RoomBookingApplication',
                'Spring-Boot-Classes': '',
                'Spring-Boot-Lib': ''
        )
        attributes 'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' ')

    }
    destinationDirectory = file("$rootDir/build")
    archivesBaseName = 'smart_campus'
}